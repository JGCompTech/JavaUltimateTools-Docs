{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Java Ultimate Tools Docs Link What is Java Ultimate Tools? Link Java Ultimate Tools, or JUT for short, is a large powerful and flexible open-source repository for use in any Java program. Java Ultimate Tools Features Link OSInfo - Contains many classes that return information about the current Windows installation. This includes Architecture, Edition, Name, Product Key, Service Pack, User Info and Version. HWInfo - Contains many classes that return information about the current computer hardware. This includes BIOS, Network, OEM, Processor, RAM and Storage. SecurityTools - Contains methods surrounding hashing and encryption. Includes methods using MD5, SHA1, SHA256, SHA384 and SHA512. Also includes encryption/decryption with RSA. CommandInfo - Allows you to run any console command and will return the result to a string to use within your program. You can also run the command elevated and it will open in a new cmd window and show the results. Note: If elevated, result cannot be returned as a string. MessageBox and Login dialogs - Dialogs to use in JavaFX applications FXML Dialog Wrapper - Class to wrap a FXML dialog object, reducing the amount of required code DatabaseTools - Allows communication with H2, HyperSQL and SQLite databases SQL Statement Builders - Allows for using methods instead of native SQL code to generate Prepared Statements User Account Management Tools - Includes User Roles, Sessions and Permissions Custom Event Manager System - Creates Events similar to the JavaFX Events but not using any JavaFX classes Utility Classes - Includes classes for managing collections, numbers and strings And Much More! Development Link Want to contribute? Great! Any help with development is greatly appreciated. If you want to add something or fix any issues please submit a pull request and if it is helpful it may be merged. Please check out our Code of Conduct for Contributors . JavaDoc Link The JavaDoc info is hosted at the following 2 locations: github.io(Current GitHub Branch) - stored in the doc folder in the project repository on Github javadoc.io(Current Maven Release) - the released JavaDoc jar on Maven Central Download JAR Link Download v1.5.0 The changelog can be found here . Using with Maven Link If you are familiar with Maven , add the following XML fragments into your pom.xml file. With those settings, your Maven will automatically download our library into your local Maven repository, since our libraries are synchronized with the Maven central repository . Maven 1 2 3 4 5 6 7 <dependencies> <dependency> <groupId> com.jgcomptech.tools </groupId> <artifactId> java-ultimate-tools </artifactId> <version> 1.5.0 </version> </dependency> </dependencies> Gradle Groovy DSL 1 compile 'com.jgcomptech.tools:java-ultimate-tools:1.5.0' Gradle Kotlin DSL 1 compile(group = \"com.jgcomptech.tools\", name = \"java-ultimate-tools\", version = \"1.5.0\") Scala SBT 1 libraryDependencies += \"com.jgcomptech.tools\" % \"java-ultimate-tools\" % \"1.5.0\" Apache Ivy 1 <dependency org=\"com.jgcomptech.tools\" name=\"java-ultimate-tools\" rev=\"1.5.0\" /> Groovy Grape 1 2 3 @Grapes( @Grab(group='com.jgcomptech.tools', module='java-ultimate-tools', version='1.5.0') ) License Link JavaUltimateTools by J&G CompTech is licensed under a Creative Commons Attribution 4.0 International License . \u00a92018 J&G CompTech","title":"Home"},{"location":"#welcome-to-java-ultimate-tools-docs","text":"","title":"Welcome to Java Ultimate Tools Docs"},{"location":"#what-is-java-ultimate-tools","text":"Java Ultimate Tools, or JUT for short, is a large powerful and flexible open-source repository for use in any Java program.","title":"What is Java Ultimate Tools?"},{"location":"#java-ultimate-tools-features","text":"OSInfo - Contains many classes that return information about the current Windows installation. This includes Architecture, Edition, Name, Product Key, Service Pack, User Info and Version. HWInfo - Contains many classes that return information about the current computer hardware. This includes BIOS, Network, OEM, Processor, RAM and Storage. SecurityTools - Contains methods surrounding hashing and encryption. Includes methods using MD5, SHA1, SHA256, SHA384 and SHA512. Also includes encryption/decryption with RSA. CommandInfo - Allows you to run any console command and will return the result to a string to use within your program. You can also run the command elevated and it will open in a new cmd window and show the results. Note: If elevated, result cannot be returned as a string. MessageBox and Login dialogs - Dialogs to use in JavaFX applications FXML Dialog Wrapper - Class to wrap a FXML dialog object, reducing the amount of required code DatabaseTools - Allows communication with H2, HyperSQL and SQLite databases SQL Statement Builders - Allows for using methods instead of native SQL code to generate Prepared Statements User Account Management Tools - Includes User Roles, Sessions and Permissions Custom Event Manager System - Creates Events similar to the JavaFX Events but not using any JavaFX classes Utility Classes - Includes classes for managing collections, numbers and strings And Much More!","title":"Java Ultimate Tools Features"},{"location":"#development","text":"Want to contribute? Great! Any help with development is greatly appreciated. If you want to add something or fix any issues please submit a pull request and if it is helpful it may be merged. Please check out our Code of Conduct for Contributors .","title":"Development"},{"location":"#javadoc","text":"The JavaDoc info is hosted at the following 2 locations: github.io(Current GitHub Branch) - stored in the doc folder in the project repository on Github javadoc.io(Current Maven Release) - the released JavaDoc jar on Maven Central","title":"JavaDoc"},{"location":"#download-jar","text":"Download v1.5.0 The changelog can be found here .","title":"Download JAR"},{"location":"#using-with-maven","text":"If you are familiar with Maven , add the following XML fragments into your pom.xml file. With those settings, your Maven will automatically download our library into your local Maven repository, since our libraries are synchronized with the Maven central repository . Maven 1 2 3 4 5 6 7 <dependencies> <dependency> <groupId> com.jgcomptech.tools </groupId> <artifactId> java-ultimate-tools </artifactId> <version> 1.5.0 </version> </dependency> </dependencies> Gradle Groovy DSL 1 compile 'com.jgcomptech.tools:java-ultimate-tools:1.5.0' Gradle Kotlin DSL 1 compile(group = \"com.jgcomptech.tools\", name = \"java-ultimate-tools\", version = \"1.5.0\") Scala SBT 1 libraryDependencies += \"com.jgcomptech.tools\" % \"java-ultimate-tools\" % \"1.5.0\" Apache Ivy 1 <dependency org=\"com.jgcomptech.tools\" name=\"java-ultimate-tools\" rev=\"1.5.0\" /> Groovy Grape 1 2 3 @Grapes( @Grab(group='com.jgcomptech.tools', module='java-ultimate-tools', version='1.5.0') )","title":"Using with Maven"},{"location":"#license","text":"JavaUltimateTools by J&G CompTech is licensed under a Creative Commons Attribution 4.0 International License . \u00a92018 J&G CompTech","title":"License"},{"location":"changelog/","text":"JUT Version Changelog Link Version 1.5.0 changes (10/07/2018): Link Updated JDK to Java 10 Login Dialogs now don't require the use of Platform.runLater() Message Boxes now don't require the use of Platform.runLater() Message Box Default button is now in the right order. Massive changes to authentication and permissions system Renamed jbdc to jdbc Removed all deprecated methods from 1.4.0 Updated javadoc Replaced some loops with streams Added trim to all string isEmpty checks Added UTF_8 protection Added ExceptionUtils class for use in junit tests All password hashing now uses BCrypt replacing SHA-512 Other minor fixes Version 1.4.2 changes (1/23/2018): Link Fixed fatal error with isUserLoggedIn method Version 1.4.1 changes (1/22/2018): Link Added UserManagerException Added PasswordHashingFailedException Added isAdminLoggedIn method Added getAdminOverride and getUserVerification methods Added requireAdmin and requireAndVerifyAdmin methods Added isLoggedIn method Fixed rare bugs with loginUser and logoutUser methods Fixed exception that was thrown if user did not exist on login dialog Limited number of SQLException and GeneralSecurityException checked exceptions Changed Session Manager dialogs to use instance vars for parameters(old methods deprecated) Version 1.4.0 changes (1/19/2018): Link Added User Management Classes (UserManager, UserAccount, UserRoleManager and UserRole) Added Permission Management Classes (Permission Manager and Permission) Added Session Management Classes (Session Manager, MultiSessionManager and Session) Added Database Builder Classes For Building SQL Code Added HyperSQL Database Support Added Custom Event/Event Handler System Added New Utilities Classes (StringUtils, NumberUtils and CollectionUtils) NOTE: Some API changes have occurred: * Moved Database.Users class to UsersManager class * Made Database class constructor auto-connect to database * Deprecated DatabaseConnectionInfo fields and replaced with getters/setters * Made all utility classes final and have private constructors * Made all method parameters and most existing classes final * Added period to first line of all javadoc comments * Updated SecurityTools.getFileHash to use Apache Commons Codec Library (Java 9 Fix) * Renamed ReInitalizeHW to ReInitializeHW * Renamed ReInitalizeOS to ReInitializeOS Version 1.3.1 changes (\u2158/2017): Link Added FXML Dialog Wrapper JavaDocs documentation is improved Pom file is improved and updated Now hosted on Maven Central Version 1.3.0 changes (3/31/2017): Link Added MessageBox and Login dialog objects Added Static Class Instantiation Protection Added Database Tools classes (Includes SQLite and H2 databases) All dependencies are now included in jar file JavaDocs documentation is improved Version 1.2.0 changes (02/22/2017): Link Fixed ComputerNameActive and ComputerNamePending not returning accurate value Added ComputerInfo Class Fixed a naming bug since version 1.1 that caused an infinite loop Fixed the java.IO.File.delete calls to now use the java.nio.file.Files.delete Created a demo if the library is run directly Fixed error with RSA generate key pair, it didn't check if save to files was true Fixed error with ConvertBytes function not returning accurate value Version 1.1.0 changes (02/18/2017): Link Created OSInfo, HWInfo, SecurityTools and WebTools classes instead of packages to improve importing. Renamed StringExpanded2 to StringExpandedFromRegistry. Moved tools.osinfo.Enums to just tools.Enums. Finalized JavaDocs. Everything is documented correctly now. Version 1.0.0 changes (02/13/2017): Link Initial Release","title":"Changelog"},{"location":"changelog/#jut-version-changelog","text":"","title":"JUT Version Changelog"},{"location":"changelog/#version-150-changes-10072018","text":"Updated JDK to Java 10 Login Dialogs now don't require the use of Platform.runLater() Message Boxes now don't require the use of Platform.runLater() Message Box Default button is now in the right order. Massive changes to authentication and permissions system Renamed jbdc to jdbc Removed all deprecated methods from 1.4.0 Updated javadoc Replaced some loops with streams Added trim to all string isEmpty checks Added UTF_8 protection Added ExceptionUtils class for use in junit tests All password hashing now uses BCrypt replacing SHA-512 Other minor fixes","title":"Version 1.5.0 changes (10/07/2018):"},{"location":"changelog/#version-142-changes-1232018","text":"Fixed fatal error with isUserLoggedIn method","title":"Version 1.4.2 changes (1/23/2018):"},{"location":"changelog/#version-141-changes-1222018","text":"Added UserManagerException Added PasswordHashingFailedException Added isAdminLoggedIn method Added getAdminOverride and getUserVerification methods Added requireAdmin and requireAndVerifyAdmin methods Added isLoggedIn method Fixed rare bugs with loginUser and logoutUser methods Fixed exception that was thrown if user did not exist on login dialog Limited number of SQLException and GeneralSecurityException checked exceptions Changed Session Manager dialogs to use instance vars for parameters(old methods deprecated)","title":"Version 1.4.1 changes (1/22/2018):"},{"location":"changelog/#version-140-changes-1192018","text":"Added User Management Classes (UserManager, UserAccount, UserRoleManager and UserRole) Added Permission Management Classes (Permission Manager and Permission) Added Session Management Classes (Session Manager, MultiSessionManager and Session) Added Database Builder Classes For Building SQL Code Added HyperSQL Database Support Added Custom Event/Event Handler System Added New Utilities Classes (StringUtils, NumberUtils and CollectionUtils) NOTE: Some API changes have occurred: * Moved Database.Users class to UsersManager class * Made Database class constructor auto-connect to database * Deprecated DatabaseConnectionInfo fields and replaced with getters/setters * Made all utility classes final and have private constructors * Made all method parameters and most existing classes final * Added period to first line of all javadoc comments * Updated SecurityTools.getFileHash to use Apache Commons Codec Library (Java 9 Fix) * Renamed ReInitalizeHW to ReInitializeHW * Renamed ReInitalizeOS to ReInitializeOS","title":"Version 1.4.0 changes (1/19/2018):"},{"location":"changelog/#version-131-changes-452017","text":"Added FXML Dialog Wrapper JavaDocs documentation is improved Pom file is improved and updated Now hosted on Maven Central","title":"Version 1.3.1 changes (4/5/2017):"},{"location":"changelog/#version-130-changes-3312017","text":"Added MessageBox and Login dialog objects Added Static Class Instantiation Protection Added Database Tools classes (Includes SQLite and H2 databases) All dependencies are now included in jar file JavaDocs documentation is improved","title":"Version 1.3.0 changes (3/31/2017):"},{"location":"changelog/#version-120-changes-02222017","text":"Fixed ComputerNameActive and ComputerNamePending not returning accurate value Added ComputerInfo Class Fixed a naming bug since version 1.1 that caused an infinite loop Fixed the java.IO.File.delete calls to now use the java.nio.file.Files.delete Created a demo if the library is run directly Fixed error with RSA generate key pair, it didn't check if save to files was true Fixed error with ConvertBytes function not returning accurate value","title":"Version 1.2.0 changes (02/22/2017):"},{"location":"changelog/#version-110-changes-02182017","text":"Created OSInfo, HWInfo, SecurityTools and WebTools classes instead of packages to improve importing. Renamed StringExpanded2 to StringExpandedFromRegistry. Moved tools.osinfo.Enums to just tools.Enums. Finalized JavaDocs. Everything is documented correctly now.","title":"Version 1.1.0 changes (02/18/2017):"},{"location":"changelog/#version-100-changes-02132017","text":"Initial Release","title":"Version 1.0.0 changes (02/13/2017):"},{"location":"AuthSystem/","text":"Auth System Documentation Link Introduction Link Package Names: com.jgcomptech.tools.authc com.jgcomptech.tools.authz The JUT Auth System is a set of classes that allow for authentication and authorization. This system uses the Database class to connect to a database to store all account info. Features Link Auth Manager Contains all methods needed for controlling the Auth System. Permission Manager Manages permissions to be used to enable or disable parts of your application. Subject Manages all tasks related to the currently logged in user account. Session Manager Manages all login sessions to allow users to login to your application. User Manager Manages all user accounts in the database. User Role Manager Manages all user account roles.","title":"Intoduction"},{"location":"AuthSystem/#auth-system-documentation","text":"","title":"Auth System Documentation"},{"location":"AuthSystem/#introduction","text":"Package Names: com.jgcomptech.tools.authc com.jgcomptech.tools.authz The JUT Auth System is a set of classes that allow for authentication and authorization. This system uses the Database class to connect to a database to store all account info.","title":"Introduction"},{"location":"AuthSystem/#features","text":"Auth Manager Contains all methods needed for controlling the Auth System. Permission Manager Manages permissions to be used to enable or disable parts of your application. Subject Manages all tasks related to the currently logged in user account. Session Manager Manages all login sessions to allow users to login to your application. User Manager Manages all user accounts in the database. User Role Manager Manages all user account roles.","title":"Features"},{"location":"AuthSystem/AuthManager/","text":"Auth Manager Link Introduction Link Package Name: com.jgcomptech.tools.authc.AuthManager The Auth Manager class contains all methods needed for controlling the Auth System. This includes methods to manage user accounts, login sessions, user roles and user permissions. Setup Link The Auth Manager is a singleton class but a new instance still needs to be initialized upon first use. When a new instance is created a \"users\" table is automatically created in the specified database. The following code can be used to create a new instance: 1 2 3 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var manager = AuthManager . getNewInstance ( db ); } After the new instance has been created you can use the following to retrieve the instance again: 1 2 3 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var manager = AuthManager . getInstance (); } An icon path and program name may also be optionally provided as parameters to change the icon and program name for all login dialogs. User Account Methods Link Create A New User (createUser) Link To create a new user use the createUser method supplying the following parameters: Username - The username of the new account Password - The password of the new account User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 3 final var authManager = AuthManager . getInstance (); authManager . createUser ( \"admin\" , \"1234\" , UserRoleManager . SystemUserRoles . ADMIN ); authManager . createUser ( \"editor\" , \"1234\" , UserRoleManager . SystemUserRoles . EDITOR ); Delete An Existing User (deleteUser) Link To delete an existing user use the deleteUser method supplying the following parameter: Username - The username of the account to delete Example 1 2 final var authManager = AuthManager . getInstance (); authManager . deleteUser ( \"admin\" ); Get Username Object (getUser) Link Retrieves a readonly immutable UserAccount object. To retrieve the object supply the following parameter: Username - The username of the account to lookup Example 1 2 final var authManager = AuthManager . getInstance (); final UserAccount user = authManager . getUser ( \"admin\" ); Check If User Exists (userExists) Link Checks to see if the specified user account exists. To check a user account, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . userExists ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin User Exists!\" ); else MessageBox . show ( \"Admin User Does Not Exist!\" ); Get User Role (getUserRole) Link Retrieves the UserRole object assigned to the specified user. To retrieve the object, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var authManager = AuthManager . getInstance (); final UserRole userRole = authManager . getUserRole ( \"admin\" ); Set User Role (getUserRole) Link Sets the user role assigned to the specified user. To set the user role, supply the following parameters: Username - The username of the account to lookup User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 final var authManager = AuthManager . getInstance (); userManager . setUserRole ( \"admin\" , UserRoleManager . SystemUserRoles . ADMIN ); Set User Password (setPassword) Link Sets the password assigned to the specified user. To set the new password, supply the following parameters: Username - The username of the account to lookup Password - The new password to set Note If you want to prevent a user from setting an empty password or to check for password complexity requirements those checks need to be implemented separately. This method allows empty passwords. Even if the password is empty, the empty password is still encrypted with a random secure salt just like any supplied password would be. Example 1 2 final var authManager = AuthManager . getInstance (); authManager . setPassword ( \"admin\" , \"newPass\" ); Check If Password Matches (checkPasswordMatches) Link This method allows you to check if the supplied password matches the user's stored password in the database. To verify the password, supply the following parameters: Username - The username of the account to lookup Password - The password to verify Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . checkPasswordMatches ( \"admin\" , \"1234\" ); if ( result ) MessageBox . show ( \"Password Matches!\" ); else MessageBox . show ( \"Password Does Not Match!\" ); Lock/Unlock A User (lockUser and unlockUser) Link A locked user account prevents login and prevents any new sessions to be opened for the user. Locking an user account may be needed for numerous reasons. To lock and unlock an account, supply the following parameter: Username - The username of the account to lock/unlock Example 1 2 3 4 5 final var authManager = AuthManager . getInstance (); //Lock The Account authManager . lockUser ( \"admin\" ); //Unlock The Account authManager . unlockUser ( \"admin\" ); Check If A User Is Locked (isUserLocked) Link A locked user account prevents login and prevents any new sessions to be opened for the user. Locking an user account may be needed for numerous reasons. To check if an account is locked, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLocked ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin Account Is Locked!\" ); else MessageBox . show ( \"Admin Account Is Unlocked!\" ); Set User Password Expiration Date (setPasswordExpirationDate) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To set a password expiration date, supply the following parameters: Username - The username of the account to update Expiration Date - A LocalDateTime object representing the expiration date Example 1 2 3 4 5 6 7 8 9 10 11 12 13 final var authManager = AuthManager . getInstance (); //Sets the date to now authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now ()); //Sets the date to 30 days from today authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now (). plusDays ( 30 )); //First Method To Set the date to January 1st, 2019 at 8am authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2019 , 1 , 1 , 8 , 0 )); //Second Method To Set the date to January 1st of 2019 at 8am authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2018 , Month . JANUARY , 1 , 8 , 0 )); //Third Method To Set the date to January 1st of 2019 at 8am final String str = \"2019-01-01 08:00\" ; final DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyy-MM-dd HH:mm\" ); authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . parse ( str , formatter )); Disable Password Expiration (disablePasswordExpiration) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To disable password expiration for a user, supply the following parameter: Username - The username of the account to update Example 1 2 final var authManager = AuthManager . getInstance (); authManager . disablePasswordExpiration ( \"admin\" ); Check If User Password Is Expired (isPasswordExpired) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To check if a user's password is expired, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isPasswordExpired ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin Account Password Is Expired!\" ); else MessageBox . show ( \"Admin Account Password Is Not Expired!\" ); Check If User Password Has Expiration Date (isPasswordSetToExpire) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To check if a user's password has an expiration date, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isPasswordSetToExpire ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin Account Password Has An Expiration Date!\" ); else MessageBox . show ( \"Admin Account Password Does Not Have An Expiration Date!\" ); Get User Password Expiration Date (getPasswordExpirationDate) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. There is two methods to retrieving the password expiration date. The date can either be returned as a LocalDateTime object or as a formatted string. Note If the expiration date has been disabled or was never enabled this method will still return an expiration date. For logistical database reasons a date still has to be set. So the date will be set to 1000 years after the user account was created or 1000 years after the date when the password expiration date was last disabled. This number can be updated if any bugs occur but it seems like 1000 years is far enough in the future to not cause any problems. LocalDateTime Object Link To retrieve the password expiration date, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyy-MM-dd HH:mm\" ); final LocalDateTime result = authManager . getPasswordExpirationDate ( \"admin\" ); MessageBox . show ( \"Admin Account Password Expires At \" + result . format ( formatter )); Formatted String Object Link To retrieve the password expiration date, supply the following parameters: Username - The username of the account to lookup Format - The string that represents the format to return the date Example 1 2 3 final var authManager = AuthManager . getInstance (); final String result = authManager . getPasswordExpirationDate ( \"admin\" , \"yyyy-MM-dd HH:mm\" ); MessageBox . show ( \"Admin Account Password Expires At \" + result ); Single-Session Methods Link Get Logged-In Username (getLoggedInUsername) Link Returns the username of the currently logged in user under the single session context. Example 1 2 final var authManager = AuthManager . getInstance (); final String currentUsername = authManager . getLoggedInUsername (); Is Any User Logged-In (isUserLoggedIn) Link Checks if a user is currently logged in under the single-user context. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLoggedIn (); if ( result ) MessageBox . show ( \"A user is logged-in!\" ); else MessageBox . show ( \"No user is logged-in!\" ); Is A Specific User Logged-In (isUserLoggedIn) Link Checks if the specified user is currently logged in under the single-user context. To check if a specific user is logged-in, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLoggedIn ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" ); Get Currently Logged-In User Session (getSession) Link Retrieves the current session for the specified username, under the single-user context. Example 1 2 final var authManager = AuthManager . getInstance (); final Session currentSession = authManager . getSession (); Get Specific User Session (getSession) Link Retrieves the current session for the specified username, under the single-user context. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var authManager = AuthManager . getInstance (); final Session session = authManager . getSession ( \"admin\" ); Show Login Dialog (showLoginWindow) Link Shows the login dialog window to log a user into the single-user context. The method returns true if a user was logged in successfully. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . showLoginWindow ( true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); Login A Specific User (loginUser) Link Logs in a user, under the single-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Warning This method does not validate credentials and should not be used except in advanced use cases. A example case could be to login a user during unit testing. The method showLoginWindow should be used instead. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . loginUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); Logout Current Logged-In User (logout) Link Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in. Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . logoutUser (); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" ); Logout Specific User (logout) Link Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameter: Username - The username of the account to logout Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" ); Get Currently Logged-In User's UserRole (getLoggedInUserRole) Link Retrieves the user role of the currently logged in user under the single user context. If no user is currently logged-in then this method will return null. Example 1 2 final var authManager = AuthManager . getInstance (); final UserRole result = authManager . getLoggedInUserRole (); Check If An Admin User Is Logged-In (isAdminLoggedIn) Link Checks if an admin user is currently logged in under the single user context. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isAdminLoggedIn (); if ( result ) MessageBox . show ( \"An Admin user is logged-in!\" ); else MessageBox . show ( \"An Admin user is not logged-in!\" ); Get Admin Login Override (getAdminOverride) Link Requests an admin user to authenticate to override permissions by showing the login dialog using the single session context. During this process the admin user is not actually logged-in, instead just their username, password and user role is verified. Returns true if admin override succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . getAdminOverride (); if ( result ) MessageBox . show ( \"Admin override succedded!\" ); else MessageBox . show ( \"Admin override failed!\" ); Get User Login Verification (getUserVerification) Link Requests that the currently logged in username to re-login using the single session context. During this process the user is not actually logged-in again, instead just their username and password is verified. Returns true if the user verification succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . getUserVerification (); if ( result ) MessageBox . show ( \"User verification succedded!\" ); else MessageBox . show ( \"User verification failed!\" ); Require That Admin Is Logged-In (requireAdmin) Link Checks that the logged-in user, under the single session context, is an admin and if not, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" ); Require That Admin Is Logged-In And Request Verification (requireAndVerifyAdmin) Link Checks that the logged-in user, under the single session context, is an admin, if true, prompts the admin to re-login and if false, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" ); Multi-Session Methods Link Is A Specific User Logged-In (isUserLoggedIn) Link Checks if the specified user is currently logged in under the multi-user context. To check if a specific user is logged-in, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLoggedIn ( \"admin\" , true ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" ); Get Max Allowed Sessions (getMaxSessions) Link Retrieves the maximum number of allowed sessions, under the multi session context, before login is disabled. Example 1 2 3 final var authManager = AuthManager . getInstance (); final int result = authManager . getMaxSessions (); MessageBox . show ( \"The max number of allowed sessions is \" + result + '!' ); Set Max Allowed Sessions (setMaxSessions) Link Sets the maximum number of allowed sessions, under the multi session context, before login is disabled. To disable the limit set the value to a negative number. To set the maximum number of allowed sessions, supply the following parameter: value - The number of allowed sessions to set Example 1 2 3 4 5 final var authManager = AuthManager . getInstance (); //Set max sessions to 30. authManager . setMaxSessions ( 30 ); //Block all session creation by setting to 0 authManager . setMaxSessions ( 0 ); Note Setting this value to a negative number will disable the limit because a negative amount of sessions can never be created. When the SessionManager is initialized the value is initially set to -1. Get Session Count (getSessionsCount) Link Retrieves the current number of logged in sessions under the multi-user context. Example 1 2 3 final var authManager = AuthManager . getInstance (); final int result = authManager . getSessionsCount (); MessageBox . show ( \"The max number of logged-in sessions is \" + result + '!' ); Get All Sessions (getSessions) Link Retrieves the current logged in sessions as a HashMap under the multi session context. The returned HashMap key is the session username and the value is the related Session object. Example 1 2 3 final var authManager = AuthManager . getInstance (); final Map < String , Session > sessions = authManager . getSessions (); MessageBox . show ( \"The max number of logged-in sessions is \" + sessions . size () + '!' ); Get Specific User Session (getSession) Link Retrieves the current session for the specified username, under the multi-user context. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 final var authManager = AuthManager . getInstance (); final Session session = authManager . getSession ( \"admin\" , true ); Login A Specific User (loginUser) Link Logs in a user, under the multi-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Warning This method does not validate credentials and should be used carefully. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). An example is listed below on how to implement this. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); This example adds password checking to verify credentials before login: Example 1 2 3 4 5 6 final var authManager = AuthManager . getInstance (); if ( authManager . checkPasswordMatches ( \"admin\" , \"1234\" )) { final boolean result = authManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); } else MessageBox . show ( \"User login failed!\" ); Logout Specific User (logout) Link Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameters: Username - The username of the account to logout true - The true boolean is required to operate under the multi-user context Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" ); Other Session Methods Link Is New Session Allowed (isNewSessionAllowed) Link Checks if creation of a new session for the specified username is allowed under the specified context. This method checks to see if the specified user is already logged-in and if the second parameter is true checks to see if the max sessions limit has been reached. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true/false - The true for the multi-user context, false for the single-user context Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isNewSessionAllowed ( \"admin\" , true ); if ( result ) MessageBox . show ( \"New User Session Is Allowed For Admin!\" ); else MessageBox . show ( \"New User Session Is Not Allowed For Admin!\" ); Other Methods Link Get All Username Objects (getUsersList) Link Retrieves a readonly immutable UserAccount object for each user account and returns the list as a HashSet. Example 1 2 final var authManager = AuthManager . getInstance (); final HashSet < UserAccount > users = authManager . getUsersList (); Get List Of All Usernames (getUsernameList) Link Retrieves a list of the user names in the database. Example 1 2 final var authManager = AuthManager . getInstance (); final HashSet < String > users = authManager . getUsernameList ();","title":"Auth Manager"},{"location":"AuthSystem/AuthManager/#auth-manager","text":"","title":"Auth Manager"},{"location":"AuthSystem/AuthManager/#introduction","text":"Package Name: com.jgcomptech.tools.authc.AuthManager The Auth Manager class contains all methods needed for controlling the Auth System. This includes methods to manage user accounts, login sessions, user roles and user permissions.","title":"Introduction"},{"location":"AuthSystem/AuthManager/#setup","text":"The Auth Manager is a singleton class but a new instance still needs to be initialized upon first use. When a new instance is created a \"users\" table is automatically created in the specified database. The following code can be used to create a new instance: 1 2 3 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var manager = AuthManager . getNewInstance ( db ); } After the new instance has been created you can use the following to retrieve the instance again: 1 2 3 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var manager = AuthManager . getInstance (); } An icon path and program name may also be optionally provided as parameters to change the icon and program name for all login dialogs.","title":"Setup"},{"location":"AuthSystem/AuthManager/#user-account-methods","text":"","title":"User Account Methods"},{"location":"AuthSystem/AuthManager/#create-a-new-user-createuser","text":"To create a new user use the createUser method supplying the following parameters: Username - The username of the new account Password - The password of the new account User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 3 final var authManager = AuthManager . getInstance (); authManager . createUser ( \"admin\" , \"1234\" , UserRoleManager . SystemUserRoles . ADMIN ); authManager . createUser ( \"editor\" , \"1234\" , UserRoleManager . SystemUserRoles . EDITOR );","title":"Create A New User (createUser)"},{"location":"AuthSystem/AuthManager/#delete-an-existing-user-deleteuser","text":"To delete an existing user use the deleteUser method supplying the following parameter: Username - The username of the account to delete Example 1 2 final var authManager = AuthManager . getInstance (); authManager . deleteUser ( \"admin\" );","title":"Delete An Existing User (deleteUser)"},{"location":"AuthSystem/AuthManager/#get-username-object-getuser","text":"Retrieves a readonly immutable UserAccount object. To retrieve the object supply the following parameter: Username - The username of the account to lookup Example 1 2 final var authManager = AuthManager . getInstance (); final UserAccount user = authManager . getUser ( \"admin\" );","title":"Get Username Object (getUser)"},{"location":"AuthSystem/AuthManager/#check-if-user-exists-userexists","text":"Checks to see if the specified user account exists. To check a user account, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . userExists ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin User Exists!\" ); else MessageBox . show ( \"Admin User Does Not Exist!\" );","title":"Check If User Exists (userExists)"},{"location":"AuthSystem/AuthManager/#get-user-role-getuserrole","text":"Retrieves the UserRole object assigned to the specified user. To retrieve the object, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var authManager = AuthManager . getInstance (); final UserRole userRole = authManager . getUserRole ( \"admin\" );","title":"Get User Role (getUserRole)"},{"location":"AuthSystem/AuthManager/#set-user-role-getuserrole","text":"Sets the user role assigned to the specified user. To set the user role, supply the following parameters: Username - The username of the account to lookup User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 final var authManager = AuthManager . getInstance (); userManager . setUserRole ( \"admin\" , UserRoleManager . SystemUserRoles . ADMIN );","title":"Set User Role (getUserRole)"},{"location":"AuthSystem/AuthManager/#set-user-password-setpassword","text":"Sets the password assigned to the specified user. To set the new password, supply the following parameters: Username - The username of the account to lookup Password - The new password to set Note If you want to prevent a user from setting an empty password or to check for password complexity requirements those checks need to be implemented separately. This method allows empty passwords. Even if the password is empty, the empty password is still encrypted with a random secure salt just like any supplied password would be. Example 1 2 final var authManager = AuthManager . getInstance (); authManager . setPassword ( \"admin\" , \"newPass\" );","title":"Set User Password (setPassword)"},{"location":"AuthSystem/AuthManager/#check-if-password-matches-checkpasswordmatches","text":"This method allows you to check if the supplied password matches the user's stored password in the database. To verify the password, supply the following parameters: Username - The username of the account to lookup Password - The password to verify Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . checkPasswordMatches ( \"admin\" , \"1234\" ); if ( result ) MessageBox . show ( \"Password Matches!\" ); else MessageBox . show ( \"Password Does Not Match!\" );","title":"Check If Password Matches (checkPasswordMatches)"},{"location":"AuthSystem/AuthManager/#lockunlock-a-user-lockuser-and-unlockuser","text":"A locked user account prevents login and prevents any new sessions to be opened for the user. Locking an user account may be needed for numerous reasons. To lock and unlock an account, supply the following parameter: Username - The username of the account to lock/unlock Example 1 2 3 4 5 final var authManager = AuthManager . getInstance (); //Lock The Account authManager . lockUser ( \"admin\" ); //Unlock The Account authManager . unlockUser ( \"admin\" );","title":"Lock/Unlock A User (lockUser and unlockUser)"},{"location":"AuthSystem/AuthManager/#check-if-a-user-is-locked-isuserlocked","text":"A locked user account prevents login and prevents any new sessions to be opened for the user. Locking an user account may be needed for numerous reasons. To check if an account is locked, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLocked ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin Account Is Locked!\" ); else MessageBox . show ( \"Admin Account Is Unlocked!\" );","title":"Check If A User Is Locked (isUserLocked)"},{"location":"AuthSystem/AuthManager/#set-user-password-expiration-date-setpasswordexpirationdate","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To set a password expiration date, supply the following parameters: Username - The username of the account to update Expiration Date - A LocalDateTime object representing the expiration date Example 1 2 3 4 5 6 7 8 9 10 11 12 13 final var authManager = AuthManager . getInstance (); //Sets the date to now authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now ()); //Sets the date to 30 days from today authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now (). plusDays ( 30 )); //First Method To Set the date to January 1st, 2019 at 8am authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2019 , 1 , 1 , 8 , 0 )); //Second Method To Set the date to January 1st of 2019 at 8am authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2018 , Month . JANUARY , 1 , 8 , 0 )); //Third Method To Set the date to January 1st of 2019 at 8am final String str = \"2019-01-01 08:00\" ; final DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyy-MM-dd HH:mm\" ); authManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . parse ( str , formatter ));","title":"Set User Password Expiration Date (setPasswordExpirationDate)"},{"location":"AuthSystem/AuthManager/#disable-password-expiration-disablepasswordexpiration","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To disable password expiration for a user, supply the following parameter: Username - The username of the account to update Example 1 2 final var authManager = AuthManager . getInstance (); authManager . disablePasswordExpiration ( \"admin\" );","title":"Disable Password Expiration (disablePasswordExpiration)"},{"location":"AuthSystem/AuthManager/#check-if-user-password-is-expired-ispasswordexpired","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To check if a user's password is expired, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isPasswordExpired ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin Account Password Is Expired!\" ); else MessageBox . show ( \"Admin Account Password Is Not Expired!\" );","title":"Check If User Password Is Expired (isPasswordExpired)"},{"location":"AuthSystem/AuthManager/#check-if-user-password-has-expiration-date-ispasswordsettoexpire","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To check if a user's password has an expiration date, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isPasswordSetToExpire ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin Account Password Has An Expiration Date!\" ); else MessageBox . show ( \"Admin Account Password Does Not Have An Expiration Date!\" );","title":"Check If User Password Has Expiration Date (isPasswordSetToExpire)"},{"location":"AuthSystem/AuthManager/#get-user-password-expiration-date-getpasswordexpirationdate","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. There is two methods to retrieving the password expiration date. The date can either be returned as a LocalDateTime object or as a formatted string. Note If the expiration date has been disabled or was never enabled this method will still return an expiration date. For logistical database reasons a date still has to be set. So the date will be set to 1000 years after the user account was created or 1000 years after the date when the password expiration date was last disabled. This number can be updated if any bugs occur but it seems like 1000 years is far enough in the future to not cause any problems.","title":"Get User Password Expiration Date (getPasswordExpirationDate)"},{"location":"AuthSystem/AuthManager/#localdatetime-object","text":"To retrieve the password expiration date, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyy-MM-dd HH:mm\" ); final LocalDateTime result = authManager . getPasswordExpirationDate ( \"admin\" ); MessageBox . show ( \"Admin Account Password Expires At \" + result . format ( formatter ));","title":"LocalDateTime Object"},{"location":"AuthSystem/AuthManager/#formatted-string-object","text":"To retrieve the password expiration date, supply the following parameters: Username - The username of the account to lookup Format - The string that represents the format to return the date Example 1 2 3 final var authManager = AuthManager . getInstance (); final String result = authManager . getPasswordExpirationDate ( \"admin\" , \"yyyy-MM-dd HH:mm\" ); MessageBox . show ( \"Admin Account Password Expires At \" + result );","title":"Formatted String Object"},{"location":"AuthSystem/AuthManager/#single-session-methods","text":"","title":"Single-Session Methods"},{"location":"AuthSystem/AuthManager/#get-logged-in-username-getloggedinusername","text":"Returns the username of the currently logged in user under the single session context. Example 1 2 final var authManager = AuthManager . getInstance (); final String currentUsername = authManager . getLoggedInUsername ();","title":"Get Logged-In Username (getLoggedInUsername)"},{"location":"AuthSystem/AuthManager/#is-any-user-logged-in-isuserloggedin","text":"Checks if a user is currently logged in under the single-user context. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLoggedIn (); if ( result ) MessageBox . show ( \"A user is logged-in!\" ); else MessageBox . show ( \"No user is logged-in!\" );","title":"Is Any User Logged-In (isUserLoggedIn)"},{"location":"AuthSystem/AuthManager/#is-a-specific-user-logged-in-isuserloggedin","text":"Checks if the specified user is currently logged in under the single-user context. To check if a specific user is logged-in, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLoggedIn ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" );","title":"Is A Specific User Logged-In (isUserLoggedIn)"},{"location":"AuthSystem/AuthManager/#get-currently-logged-in-user-session-getsession","text":"Retrieves the current session for the specified username, under the single-user context. Example 1 2 final var authManager = AuthManager . getInstance (); final Session currentSession = authManager . getSession ();","title":"Get Currently Logged-In User Session (getSession)"},{"location":"AuthSystem/AuthManager/#get-specific-user-session-getsession","text":"Retrieves the current session for the specified username, under the single-user context. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var authManager = AuthManager . getInstance (); final Session session = authManager . getSession ( \"admin\" );","title":"Get Specific User Session (getSession)"},{"location":"AuthSystem/AuthManager/#show-login-dialog-showloginwindow","text":"Shows the login dialog window to log a user into the single-user context. The method returns true if a user was logged in successfully. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . showLoginWindow ( true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" );","title":"Show Login Dialog (showLoginWindow)"},{"location":"AuthSystem/AuthManager/#login-a-specific-user-loginuser","text":"Logs in a user, under the single-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Warning This method does not validate credentials and should not be used except in advanced use cases. A example case could be to login a user during unit testing. The method showLoginWindow should be used instead. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . loginUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" );","title":"Login A Specific User (loginUser)"},{"location":"AuthSystem/AuthManager/#logout-current-logged-in-user-logout","text":"Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in. Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . logoutUser (); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" );","title":"Logout Current Logged-In User (logout)"},{"location":"AuthSystem/AuthManager/#logout-specific-user-logout","text":"Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameter: Username - The username of the account to logout Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" );","title":"Logout Specific User (logout)"},{"location":"AuthSystem/AuthManager/#get-currently-logged-in-users-userrole-getloggedinuserrole","text":"Retrieves the user role of the currently logged in user under the single user context. If no user is currently logged-in then this method will return null. Example 1 2 final var authManager = AuthManager . getInstance (); final UserRole result = authManager . getLoggedInUserRole ();","title":"Get Currently Logged-In User's UserRole (getLoggedInUserRole)"},{"location":"AuthSystem/AuthManager/#check-if-an-admin-user-is-logged-in-isadminloggedin","text":"Checks if an admin user is currently logged in under the single user context. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isAdminLoggedIn (); if ( result ) MessageBox . show ( \"An Admin user is logged-in!\" ); else MessageBox . show ( \"An Admin user is not logged-in!\" );","title":"Check If An Admin User Is Logged-In (isAdminLoggedIn)"},{"location":"AuthSystem/AuthManager/#get-admin-login-override-getadminoverride","text":"Requests an admin user to authenticate to override permissions by showing the login dialog using the single session context. During this process the admin user is not actually logged-in, instead just their username, password and user role is verified. Returns true if admin override succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . getAdminOverride (); if ( result ) MessageBox . show ( \"Admin override succedded!\" ); else MessageBox . show ( \"Admin override failed!\" );","title":"Get Admin Login Override (getAdminOverride)"},{"location":"AuthSystem/AuthManager/#get-user-login-verification-getuserverification","text":"Requests that the currently logged in username to re-login using the single session context. During this process the user is not actually logged-in again, instead just their username and password is verified. Returns true if the user verification succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . getUserVerification (); if ( result ) MessageBox . show ( \"User verification succedded!\" ); else MessageBox . show ( \"User verification failed!\" );","title":"Get User Login Verification (getUserVerification)"},{"location":"AuthSystem/AuthManager/#require-that-admin-is-logged-in-requireadmin","text":"Checks that the logged-in user, under the single session context, is an admin and if not, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" );","title":"Require That Admin Is Logged-In (requireAdmin)"},{"location":"AuthSystem/AuthManager/#require-that-admin-is-logged-in-and-request-verification-requireandverifyadmin","text":"Checks that the logged-in user, under the single session context, is an admin, if true, prompts the admin to re-login and if false, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" );","title":"Require That Admin Is Logged-In And Request Verification (requireAndVerifyAdmin)"},{"location":"AuthSystem/AuthManager/#multi-session-methods","text":"","title":"Multi-Session Methods"},{"location":"AuthSystem/AuthManager/#is-a-specific-user-logged-in-isuserloggedin_1","text":"Checks if the specified user is currently logged in under the multi-user context. To check if a specific user is logged-in, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isUserLoggedIn ( \"admin\" , true ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" );","title":"Is A Specific User Logged-In (isUserLoggedIn)"},{"location":"AuthSystem/AuthManager/#get-max-allowed-sessions-getmaxsessions","text":"Retrieves the maximum number of allowed sessions, under the multi session context, before login is disabled. Example 1 2 3 final var authManager = AuthManager . getInstance (); final int result = authManager . getMaxSessions (); MessageBox . show ( \"The max number of allowed sessions is \" + result + '!' );","title":"Get Max Allowed Sessions (getMaxSessions)"},{"location":"AuthSystem/AuthManager/#set-max-allowed-sessions-setmaxsessions","text":"Sets the maximum number of allowed sessions, under the multi session context, before login is disabled. To disable the limit set the value to a negative number. To set the maximum number of allowed sessions, supply the following parameter: value - The number of allowed sessions to set Example 1 2 3 4 5 final var authManager = AuthManager . getInstance (); //Set max sessions to 30. authManager . setMaxSessions ( 30 ); //Block all session creation by setting to 0 authManager . setMaxSessions ( 0 ); Note Setting this value to a negative number will disable the limit because a negative amount of sessions can never be created. When the SessionManager is initialized the value is initially set to -1.","title":"Set Max Allowed Sessions (setMaxSessions)"},{"location":"AuthSystem/AuthManager/#get-session-count-getsessionscount","text":"Retrieves the current number of logged in sessions under the multi-user context. Example 1 2 3 final var authManager = AuthManager . getInstance (); final int result = authManager . getSessionsCount (); MessageBox . show ( \"The max number of logged-in sessions is \" + result + '!' );","title":"Get Session Count (getSessionsCount)"},{"location":"AuthSystem/AuthManager/#get-all-sessions-getsessions","text":"Retrieves the current logged in sessions as a HashMap under the multi session context. The returned HashMap key is the session username and the value is the related Session object. Example 1 2 3 final var authManager = AuthManager . getInstance (); final Map < String , Session > sessions = authManager . getSessions (); MessageBox . show ( \"The max number of logged-in sessions is \" + sessions . size () + '!' );","title":"Get All Sessions (getSessions)"},{"location":"AuthSystem/AuthManager/#get-specific-user-session-getsession_1","text":"Retrieves the current session for the specified username, under the multi-user context. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 final var authManager = AuthManager . getInstance (); final Session session = authManager . getSession ( \"admin\" , true );","title":"Get Specific User Session (getSession)"},{"location":"AuthSystem/AuthManager/#login-a-specific-user-loginuser_1","text":"Logs in a user, under the multi-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Warning This method does not validate credentials and should be used carefully. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). An example is listed below on how to implement this. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); This example adds password checking to verify credentials before login: Example 1 2 3 4 5 6 final var authManager = AuthManager . getInstance (); if ( authManager . checkPasswordMatches ( \"admin\" , \"1234\" )) { final boolean result = authManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); } else MessageBox . show ( \"User login failed!\" );","title":"Login A Specific User (loginUser)"},{"location":"AuthSystem/AuthManager/#logout-specific-user-logout_1","text":"Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameters: Username - The username of the account to logout true - The true boolean is required to operate under the multi-user context Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" );","title":"Logout Specific User (logout)"},{"location":"AuthSystem/AuthManager/#other-session-methods","text":"","title":"Other Session Methods"},{"location":"AuthSystem/AuthManager/#is-new-session-allowed-isnewsessionallowed","text":"Checks if creation of a new session for the specified username is allowed under the specified context. This method checks to see if the specified user is already logged-in and if the second parameter is true checks to see if the max sessions limit has been reached. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true/false - The true for the multi-user context, false for the single-user context Example 1 2 3 4 final var authManager = AuthManager . getInstance (); final boolean result = authManager . isNewSessionAllowed ( \"admin\" , true ); if ( result ) MessageBox . show ( \"New User Session Is Allowed For Admin!\" ); else MessageBox . show ( \"New User Session Is Not Allowed For Admin!\" );","title":"Is New Session Allowed (isNewSessionAllowed)"},{"location":"AuthSystem/AuthManager/#other-methods","text":"","title":"Other Methods"},{"location":"AuthSystem/AuthManager/#get-all-username-objects-getuserslist","text":"Retrieves a readonly immutable UserAccount object for each user account and returns the list as a HashSet. Example 1 2 final var authManager = AuthManager . getInstance (); final HashSet < UserAccount > users = authManager . getUsersList ();","title":"Get All Username Objects (getUsersList)"},{"location":"AuthSystem/AuthManager/#get-list-of-all-usernames-getusernamelist","text":"Retrieves a list of the user names in the database. Example 1 2 final var authManager = AuthManager . getInstance (); final HashSet < String > users = authManager . getUsernameList ();","title":"Get List Of All Usernames (getUsernameList)"},{"location":"AuthSystem/PermissionManager/","text":"Permission Manager Link Introduction Link Package Name: com.jgcomptech.tools.authz.PermissionManager","title":"Permission Manager"},{"location":"AuthSystem/PermissionManager/#permission-manager","text":"","title":"Permission Manager"},{"location":"AuthSystem/PermissionManager/#introduction","text":"Package Name: com.jgcomptech.tools.authz.PermissionManager","title":"Introduction"},{"location":"AuthSystem/SessionManager/","text":"Session Manager Link Introduction Link Package Name: com.jgcomptech.tools.authc.SessionManager Warning This class is embedded in the AuthManager , Subject , and UserManager classes and is not meant to be accessed directly except in advanced use cases. To access the AuthManager's embedded SessionManager instance use the following code: 1 2 final var authManager = AuthManager . getNewInstance ( db ); final var sessionManager = authManager . getSessionManager (); To access the UserManager's embedded SessionManager instance use the following code: 1 2 final var userManager = new UserManager ( db ); final var sessionManager = userManager . getSessionManager (); The Session Manager class contains all methods needed for managing all login sessions to allow users to login to your application. This includes completing login via either using the UsernamePasswordToken or requesting credentials from the user via a login dialog. Setup Link The Session Manager is not a singleton class so a new instance needs to be initialized. Since the Session Manager is a low level class it also requires an instance of the User Manager in addition to the database instance. The following code can be used to create a new instance: Example 1 2 3 4 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var userManager = new UserManager ( db ); final var sessionManager = new SessionManager ( userManager ); } An icon path and program name may also be optionally provided as parameters to change the icon and program name for all login dialogs. Session Explanation Link A login Session is a temporary connection established by a user with a login, until either the user or the application/service terminates the connection. The user must only provide credentials for authentication at the start of a login session. The user is then authorized to use some or all of the services offered by the application/service depending on the permissions assigned to the user. Within JUT there are two types of login sessions, single-user and multi-user. All of the following documentation will be separated into two sections one for each session type/context. Single-User Session Context Link Single-User sessions are meant for frontend login to an application. These sessions can either be initiated via a UsernamePasswordToken or via a login dialog. Only one user can be logged in at one time thus meaning only one session can be open at a time. Some of the methods that are part of the Session Manager can only be used under a Single-User context. Multi-User Session Context Link Multi-User sessions are meant for backend login to an application, usually via a remote client software. These sessions can only be initiated via a UsernamePasswordToken. Almost an unlimited amount of users can be logged in at one time and is only dependant on system resources and can be limited via the setMaxSessions method. Some of the methods that are part of the Session Manager can only be used under a Multi-User context. Single-Session Methods Link Get Logged-In Username (getLoggedInUsername) Link Returns the username of the currently logged in user under the single session context. Example 1 2 final var sessionManager = new SessionManager ( userManager ); final String currentUsername = sessionManager . getLoggedInUsername (); Is Any User Logged-In (isUserLoggedIn) Link Checks if a user is currently logged in under the single-user context. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isUserLoggedIn (); if ( result ) MessageBox . show ( \"A user is logged-in!\" ); else MessageBox . show ( \"No user is logged-in!\" ); Is A Specific User Logged-In (isUserLoggedIn) Link Checks if the specified user is currently logged in under the single-user context. To check if a specific user is logged-in, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isUserLoggedIn ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" ); Get Currently Logged-In User Session (getSession) Link Retrieves the current session for the specified username, under the single-user context. Example 1 2 final var sessionManager = new SessionManager ( userManager ); final Session currentSession = sessionManager . getSession (); Get Specific User Session (getSession) Link Retrieves the current session for the specified username, under the single-user context. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var sessionManager = new SessionManager ( userManager ); final Session session = sessionManager . getSession ( \"admin\" ); Show Login Dialog (showLoginWindow) Link Shows the login dialog window to log a user into the single-user context. The method returns true if a user was logged in successfully. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . showLoginWindow ( true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); Login A Specific User (loginUser) Link Logs in a user, under the single-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Warning This method does not validate credentials and should not be used except in advanced use cases. A example case could be to login a user during unit testing. The method showLoginWindow should be used instead. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . loginUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); Logout Current Logged-In User (logout) Link Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in. Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . logoutUser (); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" ); Logout Specific User (logout) Link Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameter: Username - The username of the account to logout Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" ); Get Currently Logged-In User's UserRole (getLoggedInUserRole) Link Retrieves the user role of the currently logged in user under the single user context. If no user is currently logged-in then this method will return null. Example 1 2 final var sessionManager = new SessionManager ( userManager ); final UserRole result = sessionManager . getLoggedInUserRole (); Check If An Admin User Is Logged-In (isAdminLoggedIn) Link Checks if an admin user is currently logged in under the single user context. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isAdminLoggedIn (); if ( result ) MessageBox . show ( \"An Admin user is logged-in!\" ); else MessageBox . show ( \"An Admin user is not logged-in!\" ); Get Admin Login Override (getAdminOverride) Link Requests an admin user to authenticate to override permissions by showing the login dialog using the single session context. During this process the admin user is not actually logged-in, instead just their username, password and user role is verified. Returns true if admin override succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . getAdminOverride (); if ( result ) MessageBox . show ( \"Admin override succedded!\" ); else MessageBox . show ( \"Admin override failed!\" ); Get User Login Verification (getUserVerification) Link Requests that the currently logged in username to re-login using the single session context. During this process the user is not actually logged-in again, instead just their username and password is verified. Returns true if the user verification succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . getUserVerification (); if ( result ) MessageBox . show ( \"User verification succedded!\" ); else MessageBox . show ( \"User verification failed!\" ); Require That Admin Is Logged-In (requireAdmin) Link Checks that the logged-in user, under the single session context, is an admin and if not, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" ); Require That Admin Is Logged-In And Request Verification (requireAndVerifyAdmin) Link Checks that the logged-in user, under the single session context, is an admin, if true, prompts the admin to re-login and if false, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" ); Multi-Session Methods Link Is A Specific User Logged-In (isUserLoggedIn) Link Checks if the specified user is currently logged in under the multi-user context. To check if a specific user is logged-in, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isUserLoggedIn ( \"admin\" , true ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" ); Get Max Allowed Sessions (getMaxSessions) Link Retrieves the maximum number of allowed sessions, under the multi session context, before login is disabled. Example 1 2 3 final var sessionManager = new SessionManager ( userManager ); final int result = sessionManager . getMaxSessions (); MessageBox . show ( \"The max number of allowed sessions is \" + result + '!' ); Set Max Allowed Sessions (setMaxSessions) Link Sets the maximum number of allowed sessions, under the multi session context, before login is disabled. To disable the limit set the value to a negative number. To set the maximum number of allowed sessions, supply the following parameter: value - The number of allowed sessions to set Example 1 2 3 4 5 final var sessionManager = new SessionManager ( userManager ); //Set max sessions to 30. sessionManager . setMaxSessions ( 30 ); //Block all session creation by setting to 0 sessionManager . setMaxSessions ( 0 ); Note Setting this value to a negative number will disable the limit because a negative amount of sessions can never be created. When the SessionManager is initialized the value is initially set to -1. Get Session Count (getSessionsCount) Link Retrieves the current number of logged in sessions under the multi-user context. Example 1 2 3 final var sessionManager = new SessionManager ( userManager ); final int result = sessionManager . getSessionsCount (); MessageBox . show ( \"The max number of logged-in sessions is \" + result + '!' ); Get All Sessions (getSessions) Link Retrieves the current logged in sessions as a HashMap under the multi session context. The returned HashMap key is the session username and the value is the related Session object. Example 1 2 3 final var sessionManager = new SessionManager ( userManager ); final Map < String , Session > sessions = sessionManager . getSessions (); MessageBox . show ( \"The max number of logged-in sessions is \" + sessions . size () + '!' ); Get Specific User Session (getSession) Link Retrieves the current session for the specified username, under the multi-user context. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 final var sessionManager = new SessionManager ( userManager ); final Session session = sessionManager . getSession ( \"admin\" , true ); Login A Specific User (loginUser) Link Logs in a user, under the multi-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Warning This method does not validate credentials and should be used carefully. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). An example is listed below on how to implement this. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); This example adds password checking to verify credentials before login: Example 1 2 3 4 5 6 7 final var userManager = new UserManager ( db ); final var sessionManager = new SessionManager ( userManager ); if ( userManager . checkPasswordMatches ( \"admin\" , \"1234\" )) { final boolean result = sessionManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); } else MessageBox . show ( \"User login failed!\" ); Logout Specific User (logout) Link Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameters: Username - The username of the account to logout true - The true boolean is required to operate under the multi-user context Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" ); Other Methods Link Is New Session Allowed (isNewSessionAllowed) Link Checks if creation of a new session for the specified username is allowed under the specified context. This method checks to see if the specified user is already logged-in and if the second parameter is true checks to see if the max sessions limit has been reached. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true/false - The true for the multi-user context, false for the single-user context Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isNewSessionAllowed ( \"admin\" , true ); if ( result ) MessageBox . show ( \"New User Session Is Allowed For Admin!\" ); else MessageBox . show ( \"New User Session Is Not Allowed For Admin!\" );","title":"Session Manager"},{"location":"AuthSystem/SessionManager/#session-manager","text":"","title":"Session Manager"},{"location":"AuthSystem/SessionManager/#introduction","text":"Package Name: com.jgcomptech.tools.authc.SessionManager Warning This class is embedded in the AuthManager , Subject , and UserManager classes and is not meant to be accessed directly except in advanced use cases. To access the AuthManager's embedded SessionManager instance use the following code: 1 2 final var authManager = AuthManager . getNewInstance ( db ); final var sessionManager = authManager . getSessionManager (); To access the UserManager's embedded SessionManager instance use the following code: 1 2 final var userManager = new UserManager ( db ); final var sessionManager = userManager . getSessionManager (); The Session Manager class contains all methods needed for managing all login sessions to allow users to login to your application. This includes completing login via either using the UsernamePasswordToken or requesting credentials from the user via a login dialog.","title":"Introduction"},{"location":"AuthSystem/SessionManager/#setup","text":"The Session Manager is not a singleton class so a new instance needs to be initialized. Since the Session Manager is a low level class it also requires an instance of the User Manager in addition to the database instance. The following code can be used to create a new instance: Example 1 2 3 4 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var userManager = new UserManager ( db ); final var sessionManager = new SessionManager ( userManager ); } An icon path and program name may also be optionally provided as parameters to change the icon and program name for all login dialogs.","title":"Setup"},{"location":"AuthSystem/SessionManager/#session-explanation","text":"A login Session is a temporary connection established by a user with a login, until either the user or the application/service terminates the connection. The user must only provide credentials for authentication at the start of a login session. The user is then authorized to use some or all of the services offered by the application/service depending on the permissions assigned to the user. Within JUT there are two types of login sessions, single-user and multi-user. All of the following documentation will be separated into two sections one for each session type/context.","title":"Session Explanation"},{"location":"AuthSystem/SessionManager/#single-user-session-context","text":"Single-User sessions are meant for frontend login to an application. These sessions can either be initiated via a UsernamePasswordToken or via a login dialog. Only one user can be logged in at one time thus meaning only one session can be open at a time. Some of the methods that are part of the Session Manager can only be used under a Single-User context.","title":"Single-User Session Context"},{"location":"AuthSystem/SessionManager/#multi-user-session-context","text":"Multi-User sessions are meant for backend login to an application, usually via a remote client software. These sessions can only be initiated via a UsernamePasswordToken. Almost an unlimited amount of users can be logged in at one time and is only dependant on system resources and can be limited via the setMaxSessions method. Some of the methods that are part of the Session Manager can only be used under a Multi-User context.","title":"Multi-User Session Context"},{"location":"AuthSystem/SessionManager/#single-session-methods","text":"","title":"Single-Session Methods"},{"location":"AuthSystem/SessionManager/#get-logged-in-username-getloggedinusername","text":"Returns the username of the currently logged in user under the single session context. Example 1 2 final var sessionManager = new SessionManager ( userManager ); final String currentUsername = sessionManager . getLoggedInUsername ();","title":"Get Logged-In Username (getLoggedInUsername)"},{"location":"AuthSystem/SessionManager/#is-any-user-logged-in-isuserloggedin","text":"Checks if a user is currently logged in under the single-user context. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isUserLoggedIn (); if ( result ) MessageBox . show ( \"A user is logged-in!\" ); else MessageBox . show ( \"No user is logged-in!\" );","title":"Is Any User Logged-In (isUserLoggedIn)"},{"location":"AuthSystem/SessionManager/#is-a-specific-user-logged-in-isuserloggedin","text":"Checks if the specified user is currently logged in under the single-user context. To check if a specific user is logged-in, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isUserLoggedIn ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" );","title":"Is A Specific User Logged-In (isUserLoggedIn)"},{"location":"AuthSystem/SessionManager/#get-currently-logged-in-user-session-getsession","text":"Retrieves the current session for the specified username, under the single-user context. Example 1 2 final var sessionManager = new SessionManager ( userManager ); final Session currentSession = sessionManager . getSession ();","title":"Get Currently Logged-In User Session (getSession)"},{"location":"AuthSystem/SessionManager/#get-specific-user-session-getsession","text":"Retrieves the current session for the specified username, under the single-user context. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var sessionManager = new SessionManager ( userManager ); final Session session = sessionManager . getSession ( \"admin\" );","title":"Get Specific User Session (getSession)"},{"location":"AuthSystem/SessionManager/#show-login-dialog-showloginwindow","text":"Shows the login dialog window to log a user into the single-user context. The method returns true if a user was logged in successfully. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . showLoginWindow ( true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" );","title":"Show Login Dialog (showLoginWindow)"},{"location":"AuthSystem/SessionManager/#login-a-specific-user-loginuser","text":"Logs in a user, under the single-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameter: Username - The username of the account to lookup Warning This method does not validate credentials and should not be used except in advanced use cases. A example case could be to login a user during unit testing. The method showLoginWindow should be used instead. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . loginUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" );","title":"Login A Specific User (loginUser)"},{"location":"AuthSystem/SessionManager/#logout-current-logged-in-user-logout","text":"Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in. Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . logoutUser (); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" );","title":"Logout Current Logged-In User (logout)"},{"location":"AuthSystem/SessionManager/#logout-specific-user-logout","text":"Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameter: Username - The username of the account to logout Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" );","title":"Logout Specific User (logout)"},{"location":"AuthSystem/SessionManager/#get-currently-logged-in-users-userrole-getloggedinuserrole","text":"Retrieves the user role of the currently logged in user under the single user context. If no user is currently logged-in then this method will return null. Example 1 2 final var sessionManager = new SessionManager ( userManager ); final UserRole result = sessionManager . getLoggedInUserRole ();","title":"Get Currently Logged-In User's UserRole (getLoggedInUserRole)"},{"location":"AuthSystem/SessionManager/#check-if-an-admin-user-is-logged-in-isadminloggedin","text":"Checks if an admin user is currently logged in under the single user context. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isAdminLoggedIn (); if ( result ) MessageBox . show ( \"An Admin user is logged-in!\" ); else MessageBox . show ( \"An Admin user is not logged-in!\" );","title":"Check If An Admin User Is Logged-In (isAdminLoggedIn)"},{"location":"AuthSystem/SessionManager/#get-admin-login-override-getadminoverride","text":"Requests an admin user to authenticate to override permissions by showing the login dialog using the single session context. During this process the admin user is not actually logged-in, instead just their username, password and user role is verified. Returns true if admin override succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . getAdminOverride (); if ( result ) MessageBox . show ( \"Admin override succedded!\" ); else MessageBox . show ( \"Admin override failed!\" );","title":"Get Admin Login Override (getAdminOverride)"},{"location":"AuthSystem/SessionManager/#get-user-login-verification-getuserverification","text":"Requests that the currently logged in username to re-login using the single session context. During this process the user is not actually logged-in again, instead just their username and password is verified. Returns true if the user verification succeeded and false if the cancel button was pressed or if override failed. Fires either the sessionLoginSuccess or the sessionLoginFailure event allowing the getUser method to be called by the assigned EventHandler. If the user does not exist, getUser will return null. To show the login dialog, supply the following parameter: true/false - If true, if during the login process an error occurs the login dialog will show again listing the error text above the username field. If false, if during the login process an error occurs the entire method will return false. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . getUserVerification (); if ( result ) MessageBox . show ( \"User verification succedded!\" ); else MessageBox . show ( \"User verification failed!\" );","title":"Get User Login Verification (getUserVerification)"},{"location":"AuthSystem/SessionManager/#require-that-admin-is-logged-in-requireadmin","text":"Checks that the logged-in user, under the single session context, is an admin and if not, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" );","title":"Require That Admin Is Logged-In (requireAdmin)"},{"location":"AuthSystem/SessionManager/#require-that-admin-is-logged-in-and-request-verification-requireandverifyadmin","text":"Checks that the logged-in user, under the single session context, is an admin, if true, prompts the admin to re-login and if false, requests an admin override. During this process the user is not actually logged-in again, instead their username, password and user role is just verified. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . requireAdmin (); if ( result ) MessageBox . show ( \"Admin check passed!\" ); else MessageBox . show ( \"Admin check failed!\" );","title":"Require That Admin Is Logged-In And Request Verification (requireAndVerifyAdmin)"},{"location":"AuthSystem/SessionManager/#multi-session-methods","text":"","title":"Multi-Session Methods"},{"location":"AuthSystem/SessionManager/#is-a-specific-user-logged-in-isuserloggedin_1","text":"Checks if the specified user is currently logged in under the multi-user context. To check if a specific user is logged-in, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isUserLoggedIn ( \"admin\" , true ); if ( result ) MessageBox . show ( \"Admin user is logged-in!\" ); else MessageBox . show ( \"Admin user is not logged-in!\" );","title":"Is A Specific User Logged-In (isUserLoggedIn)"},{"location":"AuthSystem/SessionManager/#get-max-allowed-sessions-getmaxsessions","text":"Retrieves the maximum number of allowed sessions, under the multi session context, before login is disabled. Example 1 2 3 final var sessionManager = new SessionManager ( userManager ); final int result = sessionManager . getMaxSessions (); MessageBox . show ( \"The max number of allowed sessions is \" + result + '!' );","title":"Get Max Allowed Sessions (getMaxSessions)"},{"location":"AuthSystem/SessionManager/#set-max-allowed-sessions-setmaxsessions","text":"Sets the maximum number of allowed sessions, under the multi session context, before login is disabled. To disable the limit set the value to a negative number. To set the maximum number of allowed sessions, supply the following parameter: value - The number of allowed sessions to set Example 1 2 3 4 5 final var sessionManager = new SessionManager ( userManager ); //Set max sessions to 30. sessionManager . setMaxSessions ( 30 ); //Block all session creation by setting to 0 sessionManager . setMaxSessions ( 0 ); Note Setting this value to a negative number will disable the limit because a negative amount of sessions can never be created. When the SessionManager is initialized the value is initially set to -1.","title":"Set Max Allowed Sessions (setMaxSessions)"},{"location":"AuthSystem/SessionManager/#get-session-count-getsessionscount","text":"Retrieves the current number of logged in sessions under the multi-user context. Example 1 2 3 final var sessionManager = new SessionManager ( userManager ); final int result = sessionManager . getSessionsCount (); MessageBox . show ( \"The max number of logged-in sessions is \" + result + '!' );","title":"Get Session Count (getSessionsCount)"},{"location":"AuthSystem/SessionManager/#get-all-sessions-getsessions","text":"Retrieves the current logged in sessions as a HashMap under the multi session context. The returned HashMap key is the session username and the value is the related Session object. Example 1 2 3 final var sessionManager = new SessionManager ( userManager ); final Map < String , Session > sessions = sessionManager . getSessions (); MessageBox . show ( \"The max number of logged-in sessions is \" + sessions . size () + '!' );","title":"Get All Sessions (getSessions)"},{"location":"AuthSystem/SessionManager/#get-specific-user-session-getsession_1","text":"Retrieves the current session for the specified username, under the multi-user context. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Example 1 2 final var sessionManager = new SessionManager ( userManager ); final Session session = sessionManager . getSession ( \"admin\" , true );","title":"Get Specific User Session (getSession)"},{"location":"AuthSystem/SessionManager/#login-a-specific-user-loginuser_1","text":"Logs in a user, under the multi-user context, with the specified username, without checking for valid credentials. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true - The true boolean is required to operate under the multi-user context Warning This method does not validate credentials and should be used carefully. With this method the user is immediately logged in as long as the user exists and other checks pass (account unlocked, user role enabled and password not expired). An example is listed below on how to implement this. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); This example adds password checking to verify credentials before login: Example 1 2 3 4 5 6 7 final var userManager = new UserManager ( db ); final var sessionManager = new SessionManager ( userManager ); if ( userManager . checkPasswordMatches ( \"admin\" , \"1234\" )) { final boolean result = sessionManager . loginUser ( \"admin\" , true ); if ( result ) MessageBox . show ( \"User was logged-in successfully!\" ); else MessageBox . show ( \"User login failed!\" ); } else MessageBox . show ( \"User login failed!\" );","title":"Login A Specific User (loginUser)"},{"location":"AuthSystem/SessionManager/#logout-specific-user-logout_1","text":"Logs out the specified user from the single session context and clears any set permissions. This method will return false if no user is currently logged-in or if the specified user does not exist. To logout a specific user, supply the following parameters: Username - The username of the account to logout true - The true boolean is required to operate under the multi-user context Caution If the user was deleted from the database while logged in, then the getUser event method that is accessible from the assigned event handler will return null. Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . logoutUser ( \"admin\" ); if ( result ) MessageBox . show ( \"User was logged-out successfully!\" ); else MessageBox . show ( \"User logout failed!\" );","title":"Logout Specific User (logout)"},{"location":"AuthSystem/SessionManager/#other-methods","text":"","title":"Other Methods"},{"location":"AuthSystem/SessionManager/#is-new-session-allowed-isnewsessionallowed","text":"Checks if creation of a new session for the specified username is allowed under the specified context. This method checks to see if the specified user is already logged-in and if the second parameter is true checks to see if the max sessions limit has been reached. To retrieve a specific user session, supply the following parameters: Username - The username of the account to lookup true/false - The true for the multi-user context, false for the single-user context Example 1 2 3 4 final var sessionManager = new SessionManager ( userManager ); final boolean result = sessionManager . isNewSessionAllowed ( \"admin\" , true ); if ( result ) MessageBox . show ( \"New User Session Is Allowed For Admin!\" ); else MessageBox . show ( \"New User Session Is Not Allowed For Admin!\" );","title":"Is New Session Allowed (isNewSessionAllowed)"},{"location":"AuthSystem/Subject/","text":"Subject Link Introduction Link Package Name: com.jgcomptech.tools.authc.Subject","title":"Subject"},{"location":"AuthSystem/Subject/#subject","text":"","title":"Subject"},{"location":"AuthSystem/Subject/#introduction","text":"Package Name: com.jgcomptech.tools.authc.Subject","title":"Introduction"},{"location":"AuthSystem/UserManager/","text":"User Manager Link Introduction Link Package Name: com.jgcomptech.tools.authc.UserManager Warning This class is embedded in the AuthManager and Subject classes and is not meant to be accessed directly except in advanced use cases. To access the AuthManager's embedded UserManager instance use the following code: 1 2 final var authManager = AuthManager . getNewInstance ( db ); final var userManager = authManager . getUserManager (); The User Manager manages all user accounts in the database. This is where all the native SQL code is automatically generated using the Database Builder classes. Setup Link The User Manager is not a singleton class so a new instance needs to be initialized. When a new instance is created a \"users\" table is automatically created in the specified database. The following code can be used to create a new instance: Example 1 2 3 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var userManager = new UserManager ( db ); } An icon path and program name may also be optionally provided as parameters to change the icon and program name for all login dialogs. User Account Methods Link Create A New User (createUser) Link To create a new user use the createUser method supplying the following parameters: Username - The username of the new account Password - The password of the new account User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 3 final var userManager = new UserManager ( db ); userManager . createUser ( \"admin\" , \"1234\" , UserRoleManager . SystemUserRoles . ADMIN ); userManager . createUser ( \"editor\" , \"1234\" , UserRoleManager . SystemUserRoles . EDITOR ); Delete An Existing User (deleteUser) Link To delete an existing user use the deleteUser method supplying the following parameter: Username - The username of the account to delete Example 1 2 final var userManager = new UserManager ( db ); userManager . deleteUser ( \"admin\" ); Get Username Object (getUser) Link Retrieves a readonly immutable UserAccount object. To retrieve the object, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var userManager = new UserManager ( db ); final UserAccount user = userManager . getUser ( \"admin\" ); Check If User Exists (userExists) Link Checks to see if the specified user account exists. To check a user account, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var userManager = new UserManager ( db ); final boolean result = userManager . userExists ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin User Exists!\" ); else MessageBox . show ( \"Admin User Does Not Exist!\" ); Get User Role (getUserRole) Link Retrieves the UserRole object assigned to the specified user. To retrieve the object, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var userManager = new UserManager ( db ); final UserRole userRole = userManager . getUserRole ( \"admin\" ); Set User Role (getUserRole) Link Sets the user role assigned to the specified user. To set the user role, supply the following parameters: Username - The username of the account to lookup User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 final var userManager = new UserManager ( db ); userManager . setUserRole ( \"admin\" , UserRoleManager . SystemUserRoles . ADMIN ); Set User Password (setPassword) Link Sets the password assigned to the specified user. To set the new password, supply the following parameters: Username - The username of the account to lookup Password - The new password to set Note If you want to prevent a user from setting an empty password or to check for password complexity requirements those checks need to be implemented separately. This method allows empty passwords. Even if the password is empty, the empty password is still encrypted with a random secure salt just like any supplied password would be. Example 1 2 final var userManager = new UserManager ( db ); userManager . setPassword ( \"admin\" , \"newPass\" ); Check If Password Matches (checkPasswordMatches) Link This method allows you to check if the supplied password matches the user's stored password in the database. To verify the password, supply the following parameters: Username - The username of the account to lookup Password - The password to verify Example 1 2 3 4 final var userManager = new UserManager ( db ); final boolean result = userManager . checkPasswordMatches ( \"admin\" , \"1234\" ); if ( result ) MessageBox . show ( \"Password Matches!\" ); else MessageBox . show ( \"Password Does Not Match!\" ); Lock/Unlock A User Account(setLockStatus) Link A locked user account prevents login and prevents any new sessions to be opened for the user. Locking an user account may be needed for numerous reasons. To lock and unlock an account, supply the following parameters: Username - The username of the account to lock/unlock true/false - The value to set, true to lock, false to unlock Example 1 2 3 4 5 final var userManager = new UserManager ( db ); //Lock The Account userManager . setLockStatus ( \"admin\" , true ); //Unlock The Account userManager . setLockStatus ( \"admin\" , false ); Set User Password Expiration Date (setPasswordExpirationDate) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To set a password expiration date, supply the following parameters: Username - The username of the account to update Expiration Date - A LocalDateTime object representing the expiration date Example 1 2 3 4 5 6 7 8 9 10 11 12 13 final var userManager = new UserManager ( db ); //Sets the date to now userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now ()); //Sets the date to 30 days from today userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now (). plusDays ( 30 )); //First Method To Set the date to January 1st, 2019 at 8am userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2019 , 1 , 1 , 8 , 0 )); //Second Method To Set the date to January 1st of 2019 at 8am userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2018 , Month . JANUARY , 1 , 8 , 0 )); //Third Method To Set the date to January 1st of 2019 at 8am final String str = \"2019-01-01 08:00\" ; final DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyy-MM-dd HH:mm\" ); userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . parse ( str , formatter )); Disable Password Expiration (disablePasswordExpiration) Link Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To disable password expiration for a user, supply the following parameter: Username - The username of the account to update Example 1 2 final var userManager = new UserManager ( db ); userManager . disablePasswordExpiration ( \"admin\" ); Other Methods Link Get All Username Objects (getUsersList) Link The getUsersList method retrieves a readonly immutable UserAccount object for each user account and returns the list as a HashSet. Example 1 2 final var userManager = new UserManager ( db ); final HashMap < UserAccount > users = userManager . getUsersList (); Get List Of All Usernames (getUsernameList) Link Retrieves a list of the user names in the database. Example 1 2 final var authManager = AuthManager . getInstance (); final HashSet < String > users = authManager . getUsernameList ();","title":"User Manager"},{"location":"AuthSystem/UserManager/#user-manager","text":"","title":"User Manager"},{"location":"AuthSystem/UserManager/#introduction","text":"Package Name: com.jgcomptech.tools.authc.UserManager Warning This class is embedded in the AuthManager and Subject classes and is not meant to be accessed directly except in advanced use cases. To access the AuthManager's embedded UserManager instance use the following code: 1 2 final var authManager = AuthManager . getNewInstance ( db ); final var userManager = authManager . getUserManager (); The User Manager manages all user accounts in the database. This is where all the native SQL code is automatically generated using the Database Builder classes.","title":"Introduction"},{"location":"AuthSystem/UserManager/#setup","text":"The User Manager is not a singleton class so a new instance needs to be initialized. When a new instance is created a \"users\" table is automatically created in the specified database. The following code can be used to create a new instance: Example 1 2 3 try ( final var db = new Database ( \"./mydb.db\" , DatabaseType . H2 )) { final var userManager = new UserManager ( db ); } An icon path and program name may also be optionally provided as parameters to change the icon and program name for all login dialogs.","title":"Setup"},{"location":"AuthSystem/UserManager/#user-account-methods","text":"","title":"User Account Methods"},{"location":"AuthSystem/UserManager/#create-a-new-user-createuser","text":"To create a new user use the createUser method supplying the following parameters: Username - The username of the new account Password - The password of the new account User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 3 final var userManager = new UserManager ( db ); userManager . createUser ( \"admin\" , \"1234\" , UserRoleManager . SystemUserRoles . ADMIN ); userManager . createUser ( \"editor\" , \"1234\" , UserRoleManager . SystemUserRoles . EDITOR );","title":"Create A New User (createUser)"},{"location":"AuthSystem/UserManager/#delete-an-existing-user-deleteuser","text":"To delete an existing user use the deleteUser method supplying the following parameter: Username - The username of the account to delete Example 1 2 final var userManager = new UserManager ( db ); userManager . deleteUser ( \"admin\" );","title":"Delete An Existing User (deleteUser)"},{"location":"AuthSystem/UserManager/#get-username-object-getuser","text":"Retrieves a readonly immutable UserAccount object. To retrieve the object, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var userManager = new UserManager ( db ); final UserAccount user = userManager . getUser ( \"admin\" );","title":"Get Username Object (getUser)"},{"location":"AuthSystem/UserManager/#check-if-user-exists-userexists","text":"Checks to see if the specified user account exists. To check a user account, supply the following parameter: Username - The username of the account to lookup Example 1 2 3 4 final var userManager = new UserManager ( db ); final boolean result = userManager . userExists ( \"admin\" ); if ( result ) MessageBox . show ( \"Admin User Exists!\" ); else MessageBox . show ( \"Admin User Does Not Exist!\" );","title":"Check If User Exists (userExists)"},{"location":"AuthSystem/UserManager/#get-user-role-getuserrole","text":"Retrieves the UserRole object assigned to the specified user. To retrieve the object, supply the following parameter: Username - The username of the account to lookup Example 1 2 final var userManager = new UserManager ( db ); final UserRole userRole = userManager . getUserRole ( \"admin\" );","title":"Get User Role (getUserRole)"},{"location":"AuthSystem/UserManager/#set-user-role-getuserrole","text":"Sets the user role assigned to the specified user. To set the user role, supply the following parameters: Username - The username of the account to lookup User Role - The user role of the new account The user role can be a text string or one of the items from the UserRoleManager.SystemUserRoles enum. The UserRoleManager.SystemUserRoles list contains: ADMIN AUTHOR EDITOR BASIC NONE Note The NONE user role can never have permissions assigned to it. Using the NONE user role is a quick way to remove all permissions from a user. Example 1 2 final var userManager = new UserManager ( db ); userManager . setUserRole ( \"admin\" , UserRoleManager . SystemUserRoles . ADMIN );","title":"Set User Role (getUserRole)"},{"location":"AuthSystem/UserManager/#set-user-password-setpassword","text":"Sets the password assigned to the specified user. To set the new password, supply the following parameters: Username - The username of the account to lookup Password - The new password to set Note If you want to prevent a user from setting an empty password or to check for password complexity requirements those checks need to be implemented separately. This method allows empty passwords. Even if the password is empty, the empty password is still encrypted with a random secure salt just like any supplied password would be. Example 1 2 final var userManager = new UserManager ( db ); userManager . setPassword ( \"admin\" , \"newPass\" );","title":"Set User Password (setPassword)"},{"location":"AuthSystem/UserManager/#check-if-password-matches-checkpasswordmatches","text":"This method allows you to check if the supplied password matches the user's stored password in the database. To verify the password, supply the following parameters: Username - The username of the account to lookup Password - The password to verify Example 1 2 3 4 final var userManager = new UserManager ( db ); final boolean result = userManager . checkPasswordMatches ( \"admin\" , \"1234\" ); if ( result ) MessageBox . show ( \"Password Matches!\" ); else MessageBox . show ( \"Password Does Not Match!\" );","title":"Check If Password Matches (checkPasswordMatches)"},{"location":"AuthSystem/UserManager/#lockunlock-a-user-accountsetlockstatus","text":"A locked user account prevents login and prevents any new sessions to be opened for the user. Locking an user account may be needed for numerous reasons. To lock and unlock an account, supply the following parameters: Username - The username of the account to lock/unlock true/false - The value to set, true to lock, false to unlock Example 1 2 3 4 5 final var userManager = new UserManager ( db ); //Lock The Account userManager . setLockStatus ( \"admin\" , true ); //Unlock The Account userManager . setLockStatus ( \"admin\" , false );","title":"Lock/Unlock A User Account(setLockStatus)"},{"location":"AuthSystem/UserManager/#set-user-password-expiration-date-setpasswordexpirationdate","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To set a password expiration date, supply the following parameters: Username - The username of the account to update Expiration Date - A LocalDateTime object representing the expiration date Example 1 2 3 4 5 6 7 8 9 10 11 12 13 final var userManager = new UserManager ( db ); //Sets the date to now userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now ()); //Sets the date to 30 days from today userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . now (). plusDays ( 30 )); //First Method To Set the date to January 1st, 2019 at 8am userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2019 , 1 , 1 , 8 , 0 )); //Second Method To Set the date to January 1st of 2019 at 8am userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . of ( 2018 , Month . JANUARY , 1 , 8 , 0 )); //Third Method To Set the date to January 1st of 2019 at 8am final String str = \"2019-01-01 08:00\" ; final DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyy-MM-dd HH:mm\" ); userManager . setPasswordExpirationDate ( \"admin\" , LocalDateTime . parse ( str , formatter ));","title":"Set User Password Expiration Date (setPasswordExpirationDate)"},{"location":"AuthSystem/UserManager/#disable-password-expiration-disablepasswordexpiration","text":"Setting a password to expire after a specified date allows the prevention of login and new session creation if the password is expired. Setting a password to expire could be used to force regular password changes or allow for temporary accounts to be made. To disable password expiration for a user, supply the following parameter: Username - The username of the account to update Example 1 2 final var userManager = new UserManager ( db ); userManager . disablePasswordExpiration ( \"admin\" );","title":"Disable Password Expiration (disablePasswordExpiration)"},{"location":"AuthSystem/UserManager/#other-methods","text":"","title":"Other Methods"},{"location":"AuthSystem/UserManager/#get-all-username-objects-getuserslist","text":"The getUsersList method retrieves a readonly immutable UserAccount object for each user account and returns the list as a HashSet. Example 1 2 final var userManager = new UserManager ( db ); final HashMap < UserAccount > users = userManager . getUsersList ();","title":"Get All Username Objects (getUsersList)"},{"location":"AuthSystem/UserManager/#get-list-of-all-usernames-getusernamelist","text":"Retrieves a list of the user names in the database. Example 1 2 final var authManager = AuthManager . getInstance (); final HashSet < String > users = authManager . getUsernameList ();","title":"Get List Of All Usernames (getUsernameList)"},{"location":"AuthSystem/UserRoleManager/","text":"User Role Manager Link Introduction Link Package Name: com.jgcomptech.tools.authc.UserRoleManager","title":"User Role Manager"},{"location":"AuthSystem/UserRoleManager/#user-role-manager","text":"","title":"User Role Manager"},{"location":"AuthSystem/UserRoleManager/#introduction","text":"Package Name: com.jgcomptech.tools.authc.UserRoleManager","title":"Introduction"},{"location":"DatabaseTools/","text":"Database Tools Documentation Link Introduction Link Package Names: com.jgcomptech.tools.databasetools.jdbc com.jgcomptech.tools.databasetools.jdbc.builders Contains tools to communicate with a database using JDBC . The goal behind this class is to allow connection with the database and creation of auto-generated SQL statements so manually creating native SQL code is not needed. This includes initial table creation which is not normally included in most database frameworks. Supported Databases Link H2 HyperSQL SQLite SQL Statement Builders Link ColumnBuilder Used for creating a database table column. DeleteBuilder Used for creating a DELETE sql statement to delete a row from a table. IndexBuilder Used for creating a CREATE sql statement to create a new table index. InsertBuilder Used for creating an INSERT sql statement to add a row to a table. QueryBuilder Used for creating a SELECT sql statement to query the database. TableBuilder Used for creating an CREATE sql statement to create a new table. UpdateBuilder Used for creating an UPDATE sql statement to update a row in a table. WhereBuilder Used for creating a WHERE sql statement to set a constraint on another statement.","title":"Database Tools"},{"location":"DatabaseTools/#database-tools-documentation","text":"","title":"Database Tools Documentation"},{"location":"DatabaseTools/#introduction","text":"Package Names: com.jgcomptech.tools.databasetools.jdbc com.jgcomptech.tools.databasetools.jdbc.builders Contains tools to communicate with a database using JDBC . The goal behind this class is to allow connection with the database and creation of auto-generated SQL statements so manually creating native SQL code is not needed. This includes initial table creation which is not normally included in most database frameworks.","title":"Introduction"},{"location":"DatabaseTools/#supported-databases","text":"H2 HyperSQL SQLite","title":"Supported Databases"},{"location":"DatabaseTools/#sql-statement-builders","text":"ColumnBuilder Used for creating a database table column. DeleteBuilder Used for creating a DELETE sql statement to delete a row from a table. IndexBuilder Used for creating a CREATE sql statement to create a new table index. InsertBuilder Used for creating an INSERT sql statement to add a row to a table. QueryBuilder Used for creating a SELECT sql statement to query the database. TableBuilder Used for creating an CREATE sql statement to create a new table. UpdateBuilder Used for creating an UPDATE sql statement to update a row in a table. WhereBuilder Used for creating a WHERE sql statement to set a constraint on another statement.","title":"SQL Statement Builders"},{"location":"Dialogs/","text":"Dialogs Documentation Link Introduction Link Package Name: com.jgcomptech.tools.dialogs Contains JavaFX dialogs to use in your application. Platform.runLater is not needed to be called since all dialogs use a wrapper class that automatically calls runLater if it is needed. Features Link LoginDialog Creates a Login Dialog for use to authenticate passwords. Allows for display of error message in case of login failure. MessageBox Displays message box with specified options. FXMLDialogWrapper Allows custom creation of a dialog using a specified JavaFX fxml file. Note The MessageBox.Show() method is used throughout this documentation to show messages for demo example purposes. These code statements are not required for the example to function.","title":"Dialogs"},{"location":"Dialogs/#dialogs-documentation","text":"","title":"Dialogs Documentation"},{"location":"Dialogs/#introduction","text":"Package Name: com.jgcomptech.tools.dialogs Contains JavaFX dialogs to use in your application. Platform.runLater is not needed to be called since all dialogs use a wrapper class that automatically calls runLater if it is needed.","title":"Introduction"},{"location":"Dialogs/#features","text":"LoginDialog Creates a Login Dialog for use to authenticate passwords. Allows for display of error message in case of login failure. MessageBox Displays message box with specified options. FXMLDialogWrapper Allows custom creation of a dialog using a specified JavaFX fxml file. Note The MessageBox.Show() method is used throughout this documentation to show messages for demo example purposes. These code statements are not required for the example to function.","title":"Features"},{"location":"EventManagement/","text":"Event Management Documentation Link Introduction Link Package Name: com.jgcomptech.tools.events Contains classes to manage custom events. All events are managed through the Event Manager class. Note The JavaFX EventHandler class is not the same as the included EventHandler class and is not compatible with the JUT event system. Features Link Registration and firing events Creation of event handlers to handle fired events The ability to pass arguments to event handlers","title":"Event Management"},{"location":"EventManagement/#event-management-documentation","text":"","title":"Event Management Documentation"},{"location":"EventManagement/#introduction","text":"Package Name: com.jgcomptech.tools.events Contains classes to manage custom events. All events are managed through the Event Manager class. Note The JavaFX EventHandler class is not the same as the included EventHandler class and is not compatible with the JUT event system.","title":"Introduction"},{"location":"EventManagement/#features","text":"Registration and firing events Creation of event handlers to handle fired events The ability to pass arguments to event handlers","title":"Features"},{"location":"HWInfo/","text":"HWInfo Documentation Link Introduction Link Package Name: com.jgcomptech.tools.HWInfo The HWInfo class returns information about the currently installed hardware. Features Link BIOS Returns information about the system BIOS. Network Returns information about the current network. OEM Returns information about the system manufacturer. Processor Returns information about the system processor. RAM Returns information about the system RAM. Storage Returns information about the system storage.","title":"HWInfo"},{"location":"HWInfo/#hwinfo-documentation","text":"","title":"HWInfo Documentation"},{"location":"HWInfo/#introduction","text":"Package Name: com.jgcomptech.tools.HWInfo The HWInfo class returns information about the currently installed hardware.","title":"Introduction"},{"location":"HWInfo/#features","text":"BIOS Returns information about the system BIOS. Network Returns information about the current network. OEM Returns information about the system manufacturer. Processor Returns information about the system processor. RAM Returns information about the system RAM. Storage Returns information about the system storage.","title":"Features"},{"location":"OSInfo/","text":"OSInfo Documentation Link Introduction Link Package Name: com.jgcomptech.tools.OSInfo The OSInfo class returns information about the current operating system. Features Link Architecture Determines if the current application is 32 or 64-bit. Name Returns the name of the operating system running on this Computer. ComputerNameActive and ComputerNamePending returns the computer network name. Windows Returns information about the current Windows installation. CheckIf Returns boolean value checks. is32BitOS - Identifies if OS is a 32 Bit OS. is64BitOS - Identifies if OS is a 64 Bit OS. isLinux - Identifies if OS is a distro of Linux. isMac - Identifies if OS is MacOSX. isSolaris - Identifies if OS is Solaris. isWindows - Identifies if OS is Windows.","title":"OSInfo"},{"location":"OSInfo/#osinfo-documentation","text":"","title":"OSInfo Documentation"},{"location":"OSInfo/#introduction","text":"Package Name: com.jgcomptech.tools.OSInfo The OSInfo class returns information about the current operating system.","title":"Introduction"},{"location":"OSInfo/#features","text":"Architecture Determines if the current application is 32 or 64-bit. Name Returns the name of the operating system running on this Computer. ComputerNameActive and ComputerNamePending returns the computer network name. Windows Returns information about the current Windows installation. CheckIf Returns boolean value checks. is32BitOS - Identifies if OS is a 32 Bit OS. is64BitOS - Identifies if OS is a 64 Bit OS. isLinux - Identifies if OS is a distro of Linux. isMac - Identifies if OS is MacOSX. isSolaris - Identifies if OS is Solaris. isWindows - Identifies if OS is Windows.","title":"Features"},{"location":"SecurityTools/","text":"Security Tools Documentation Link Introduction Link Package Name: com.jgcomptech.tools.SecurityTools Contains methods surrounding hashing and encryption. Includes methods using MD5, SHA1, SHA256, SHA384, SHA512 and BCrypt. Also includes encryption/decryption with RSA. Features Link FileHashes Contains methods dealing with hashing files. PasswordHashes Contains methods dealing with hashing passwords. RSAFiles Contains methods dealing with RSA key files. RSAHashes Contains methods dealing with RSA encryption and decryption.","title":"Security Tools"},{"location":"SecurityTools/#security-tools-documentation","text":"","title":"Security Tools Documentation"},{"location":"SecurityTools/#introduction","text":"Package Name: com.jgcomptech.tools.SecurityTools Contains methods surrounding hashing and encryption. Includes methods using MD5, SHA1, SHA256, SHA384, SHA512 and BCrypt. Also includes encryption/decryption with RSA.","title":"Introduction"},{"location":"SecurityTools/#features","text":"FileHashes Contains methods dealing with hashing files. PasswordHashes Contains methods dealing with hashing passwords. RSAFiles Contains methods dealing with RSA key files. RSAHashes Contains methods dealing with RSA encryption and decryption.","title":"Features"},{"location":"Utils/","text":"Utils Documentation Link Introduction Link JUT contains many utils classes to allow for extension and simplification of many aspects of Java. Features Link CollectionUtils Contains methods for dealing with collections. ExceptionUtils Contains methods for dealing with exceptions. NumberUtils Contains methods dealing with numbers and math. StringUtils Contains methods dealing with strings.","title":"Utils"},{"location":"Utils/#utils-documentation","text":"","title":"Utils Documentation"},{"location":"Utils/#introduction","text":"JUT contains many utils classes to allow for extension and simplification of many aspects of Java.","title":"Introduction"},{"location":"Utils/#features","text":"CollectionUtils Contains methods for dealing with collections. ExceptionUtils Contains methods for dealing with exceptions. NumberUtils Contains methods dealing with numbers and math. StringUtils Contains methods dealing with strings.","title":"Features"}]}